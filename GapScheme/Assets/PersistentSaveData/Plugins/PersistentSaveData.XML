<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PersistentSaveData</name>
    </assembly>
    <members>
        <member name="T:PersistentSaveData.Core.Formatters.FileFormats">
            <summary>
            List of available file format save/load type
            </summary>
        </member>
        <member name="T:PersistentSaveData.Core.Formatters.BinaryFileFormatter">
            <summary>
            Formats data in Binary format for save/load operations
            </summary>
        </member>
        <member name="P:PersistentSaveData.Core.Formatters.BinaryFileFormatter.fileFormat">
            <summary>
            Gets the FileFormat type for this formatter
            </summary>
        </member>
        <member name="P:PersistentSaveData.Core.Formatters.BinaryFileFormatter.fileFormatName">
            <summary>
            Gets the FileFormat name for this formatter
            </summary>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.BinaryFileFormatter.GetFullFileKey(System.String)">
            <summary>
            Creates a full path file from the key name
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>Full path file name</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.BinaryFileFormatter.Deserialize(System.String)">
            <summary>
            Loads file data from file using the unique key
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>Persistent data from file format</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.BinaryFileFormatter.Serialize(System.String,PersistentSaveData.Core.PersistData)">
            <summary>
            Saves file data to file using the unique key
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <param name="persistData">Data to persist</param>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.BinaryFileFormatter.HasData(System.String)">
            <summary>
            Check that the file exists and contains data
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>True if the file exists and has data</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.BinaryFileFormatter.DeleteData(System.String)">
            <summary>
            Deletes a data file
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>True is the file was removed</returns>
        </member>
        <member name="T:PersistentSaveData.Core.Formatters.CSVFileFormatter">
            <summary>
            Formats data in CSV format for save/load operations
            </summary>
        </member>
        <member name="P:PersistentSaveData.Core.Formatters.CSVFileFormatter.fileFormat">
            <summary>
            Gets the FileFormat type for this formatter
            </summary>
        </member>
        <member name="P:PersistentSaveData.Core.Formatters.CSVFileFormatter.fileFormatName">
            <summary>
            Gets the FileFormat name for this formatter
            </summary>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.CSVFileFormatter.GetFullFileKey(System.String)">
            <summary>
            Creates a full path file from the key name
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>Full path file name</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.CSVFileFormatter.Deserialize(System.String)">
            <summary>
            Loads file data from file using the unique key
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>Persistent data from file format</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.CSVFileFormatter.Serialize(System.String,PersistentSaveData.Core.PersistData)">
            <summary>
            Saves file data to file using the unique key
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <param name="persistData">Data to persist</param>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.CSVFileFormatter.HasData(System.String)">
            <summary>
            Check that the file exists and contains data
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>True if the file exists and has data</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.CSVFileFormatter.DeleteData(System.String)">
            <summary>
            Deletes a data file
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>True is the file was removed</returns>
        </member>
        <member name="T:PersistentSaveData.Core.Formatters.FileFormat">
            <summary>
            File Format Types that are available for saving and loading
            </summary>
        </member>
        <member name="F:PersistentSaveData.Core.Formatters.FileFormat.Binary">
            <summary>
            Binary file format type
            </summary>
        </member>
        <member name="F:PersistentSaveData.Core.Formatters.FileFormat.XML">
            <summary>
            XML file format type
            </summary>
        </member>
        <member name="F:PersistentSaveData.Core.Formatters.FileFormat.JSON">
            <summary>
            JSON file format type
            </summary>
        </member>
        <member name="F:PersistentSaveData.Core.Formatters.FileFormat.CSV">
            <summary>
            CSV file format type
            </summary>
        </member>
        <member name="F:PersistentSaveData.Core.Formatters.FileFormat.PlayerPrefs">
            <summary>
            PlayerPrefs file format type
            </summary>
        </member>
        <member name="F:PersistentSaveData.Core.Formatters.FileFormat.Custom1">
            <summary>
            Empty file format type slot 1
            </summary>
        </member>
        <member name="F:PersistentSaveData.Core.Formatters.FileFormat.Custom2">
            <summary>
            Empty file format type slot 2
            </summary>
        </member>
        <member name="F:PersistentSaveData.Core.Formatters.FileFormat.Custom3">
            <summary>
            Empty file format type slot 3
            </summary>
        </member>
        <member name="F:PersistentSaveData.Core.Formatters.FileFormat.Custom4">
            <summary>
            Empty file format type slot 4
            </summary>
        </member>
        <member name="F:PersistentSaveData.Core.Formatters.FileFormat.Custom5">
            <summary>
            Empty file format type slot 5
            </summary>
        </member>
        <member name="T:PersistentSaveData.Core.Formatters.Formatter">
            <summary>
            Base class to provide functionality for the File FOrmatters
            </summary>
        </member>
        <member name="F:PersistentSaveData.Core.Formatters.Formatter.Empty">
            <summary>
            Reserence to an Empty Formatter to avoid using null as a reference check
            </summary>
        </member>
        <member name="P:PersistentSaveData.Core.Formatters.Formatter.persistentDataPath">
            <summary>
            Path to save application data
            </summary>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.Formatter.LoadAssemblyFormatters(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Method to load all Formatters for access via inherited classes
            </summary>
            <param name="types">Types to create instances of</param>
            <returns></returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.Formatter.PersistentDataPathCombine(System.String)">
            <summary>
            Creates a full path file from the key name
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>Full path file name</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.Formatter.GetFullFileKey(System.String)">
            <summary>
            Creates a full path file from the key name
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>Full path file name</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.Formatter.Deserialize(System.String)">
            <summary>
            Loads file data from file using the unique key
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>Persistent data from file format</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.Formatter.Serialize(System.String,PersistentSaveData.Core.PersistData)">
            <summary>
            Saves file data to file using the unique key
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <param name="persistData">Data to persist</param>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.Formatter.HasData(System.String)">
            <summary>
            Check that the file exists and contains data
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>True if the file exists and has data</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.Formatter.DeleteData(System.String)">
            <summary>
            Deletes a data file
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>True is the file was removed</returns>
        </member>
        <member name="P:PersistentSaveData.Core.Formatters.Formatter.fileFormat">
            <summary>
            Gets the FileFormat type for this formatter
            </summary>
        </member>
        <member name="P:PersistentSaveData.Core.Formatters.Formatter.fileFormatName">
            <summary>
            Gets the FileFormat name for this formatter
            </summary>
        </member>
        <member name="T:PersistentSaveData.Core.Formatters.Formatter.EmptyFormatter">
            <summary>
            Reserence to an Empty Formatter to avoid using null as a reference check
            </summary>
        </member>
        <member name="P:PersistentSaveData.Core.Formatters.Formatter.EmptyFormatter.fileFormat">
            <summary>
            Gets the FileFormat type for this formatter
            </summary>
        </member>
        <member name="P:PersistentSaveData.Core.Formatters.Formatter.EmptyFormatter.fileFormatName">
            <summary>
            Gets the FileFormat name for this formatter
            </summary>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.Formatter.EmptyFormatter.Deserialize(System.String)">
            <summary>
            Loads file data from file using the unique key
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>Persistent data from file format</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.Formatter.EmptyFormatter.GetFullFileKey(System.String)">
            <summary>
            Creates a full path file from the key name
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>Full path file name</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.Formatter.EmptyFormatter.HasData(System.String)">
            <summary>
            Check that the file exists and contains data
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>True if the file exists and has data</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.Formatter.EmptyFormatter.DeleteData(System.String)">
            <summary>
            Deletes a data file
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>True is the file was removed</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.Formatter.EmptyFormatter.Serialize(System.String,PersistentSaveData.Core.PersistData)">
            <summary>
            Saves file data to file using the unique key
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <param name="persistData">Data to persist</param>
        </member>
        <member name="T:PersistentSaveData.Core.Formatters.JSONFileFormatter">
            <summary>
            Formats data in JSON format for save/load operations
            </summary>
        </member>
        <member name="P:PersistentSaveData.Core.Formatters.JSONFileFormatter.fileFormat">
            <summary>
            Gets the FileFormat type for this formatter
            </summary>
        </member>
        <member name="P:PersistentSaveData.Core.Formatters.JSONFileFormatter.fileFormatName">
            <summary>
            Gets the FileFormat name for this formatter
            </summary>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.JSONFileFormatter.GetFullFileKey(System.String)">
            <summary>
            Creates a full path file from the key name
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>Full path file name</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.JSONFileFormatter.Deserialize(System.String)">
            <summary>
            Loads file data from file using the unique key
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>Persistent data from file format</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.JSONFileFormatter.Serialize(System.String,PersistentSaveData.Core.PersistData)">
            <summary>
            Saves file data to file using the unique key
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <param name="persistData">Data to persist</param>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.JSONFileFormatter.HasData(System.String)">
            <summary>
            Check that the file exists and contains data
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>True if the file exists and has data</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.JSONFileFormatter.DeleteData(System.String)">
            <summary>
            Deletes a data file
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>True is the file was removed</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.JSONFileFormatter.ToJson(PersistentSaveData.Core.PersistData)">
            <summary>
            Converts persistend data to json string
            </summary>
            <param name="persistData">Data to persist</param>
            <returns>Json string object</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.JSONFileFormatter.FromJSON(System.String)">
            <summary>
            Turns Persistent json data into PersistData class object
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="T:PersistentSaveData.Core.Formatters.XMLFileFormatter">
            <summary>
            Formats data in XML format for save/load operations
            </summary>
        </member>
        <member name="P:PersistentSaveData.Core.Formatters.XMLFileFormatter.fileFormat">
            <summary>
            Gets the FileFormat type for this formatter
            </summary>
        </member>
        <member name="P:PersistentSaveData.Core.Formatters.XMLFileFormatter.fileFormatName">
            <summary>
            Gets the FileFormat name for this formatter
            </summary>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.XMLFileFormatter.GetFullFileKey(System.String)">
            <summary>
            Creates a full path file from the key name
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>Full path file name</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.XMLFileFormatter.Deserialize(System.String)">
            <summary>
            Loads file data from file using the unique key
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>Persistent data from file format</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.XMLFileFormatter.Serialize(System.String,PersistentSaveData.Core.PersistData)">
            <summary>
            Saves file data to file using the unique key
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <param name="persistData">Data to persist</param>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.XMLFileFormatter.HasData(System.String)">
            <summary>
            Check that the file exists and contains data
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>True if the file exists and has data</returns>
        </member>
        <member name="M:PersistentSaveData.Core.Formatters.XMLFileFormatter.DeleteData(System.String)">
            <summary>
            Deletes a data file
            </summary>
            <param name="fileKey">Key name to use for file path reference</param>
            <returns>True is the file was removed</returns>
        </member>
        <member name="T:PersistentSaveData.Core.PersistentSettings">
            <summary>
            Setting required to manage pools
            </summary>
        </member>
        <member name="P:PersistentSaveData.Core.PersistentSettings.Instance">
            <summary>
            Access to single instance class
            </summary>
        </member>
        <member name="M:PersistentSaveData.Core.PersistentSettings.GetTryIt">
            <summary>
            Is this version the free Try It version
            </summary>
            <returns>True if this is the Try It version</returns>
        </member>
        <member name="M:PersistentSaveData.Core.PersistentSettings.GetInEditor">
            <summary>
            The project is running in the Unity Editor
            </summary>
            <returns>rue if this is the application is running in the Unity Editor</returns>
        </member>
        <member name="M:PersistentSaveData.Core.PersistentSettings.DoTryIt(System.Action)">
            <summary>
            Allows action to be invoked depending on is try it version
            </summary>
            <param name="action">The action to preform.  ie The main action to disable the functionality</param>
        </member>
    </members>
</doc>
